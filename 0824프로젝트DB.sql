--------------------------------------------------------
--  파일이 생성됨 - 월요일-8월-24-2020   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Type FILE_ARRAY
--------------------------------------------------------

  CREATE OR REPLACE TYPE "MINIPRJ"."FILE_ARRAY" 
IS TABLE OF VARCHAR2(1000);

/
--------------------------------------------------------
--  DDL for Sequence EX_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "MINIPRJ"."EX_SEQ"  MINVALUE 1 MAXVALUE 10000 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Sequence USERS_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "MINIPRJ"."USERS_SEQ"  MINVALUE 1 MAXVALUE 10000 INCREMENT BY 1 START WITH 61 CACHE 20 NOORDER  NOCYCLE ;
--------------------------------------------------------
--  DDL for Table BOARDS
--------------------------------------------------------

  CREATE TABLE "MINIPRJ"."BOARDS" 
   (	"B_IDX" NUMBER(5,0), 
	"B_MENU_ID" CHAR(6 BYTE), 
	"B_TITLE" VARCHAR2(100 BYTE), 
	"B_CONT" VARCHAR2(4000 BYTE), 
	"B_WRITER" VARCHAR2(20 BYTE), 
	"B_REGDATE" VARCHAR2(50 BYTE), 
	"B_READCOUNT" NUMBER(5,0) DEFAULT 0, 
	"B_BNUM" NUMBER(5,0), 
	"B_LVL" NUMBER(5,0), 
	"B_STEP" NUMBER(5,0), 
	"B_NREF" NUMBER(5,0), 
	"B_DELNUM" NUMBER(5,0) DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Table BOARDS_HISTORY
--------------------------------------------------------

  CREATE TABLE "MINIPRJ"."BOARDS_HISTORY" 
   (	"H_B_IDX" NUMBER(5,0), 
	"H_B_MENU_ID" CHAR(6 BYTE), 
	"H_B_TITLE" VARCHAR2(100 BYTE), 
	"H_B_CONT" VARCHAR2(4000 BYTE), 
	"H_B_WRITER" VARCHAR2(20 BYTE), 
	"H_B_REGDATE" VARCHAR2(20 BYTE), 
	"H_B_READCOUNT" NUMBER(5,0) DEFAULT 0, 
	"H_B_BNUM" NUMBER(5,0), 
	"H_B_LVL" NUMBER(5,0), 
	"H_B_STEP" NUMBER(5,0), 
	"H_B_NREF" NUMBER(5,0), 
	"H_B_DELNUM" NUMBER(5,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Table COMMONS
--------------------------------------------------------

  CREATE TABLE "MINIPRJ"."COMMONS" 
   (	"COM_ID" CHAR(7 BYTE), 
	"COM_VAL" VARCHAR2(40 BYTE), 
	"COM_LVL" NUMBER(2,0), 
	"PARENT_ID" CHAR(7 BYTE), 
	"GRP_ID" CHAR(7 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Table COMMONS_GRP
--------------------------------------------------------

  CREATE TABLE "MINIPRJ"."COMMONS_GRP" 
   (	"GRP_ID" CHAR(7 BYTE), 
	"GRP_VAL" VARCHAR2(40 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Table FILES
--------------------------------------------------------

  CREATE TABLE "MINIPRJ"."FILES" 
   (	"FILE_NUM" NUMBER(5,0), 
	"IDX" NUMBER(5,0), 
	"FILENAME" VARCHAR2(300 BYTE), 
	"FILEEXT" VARCHAR2(20 BYTE), 
	"SFILENAME" VARCHAR2(300 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Table MENUS
--------------------------------------------------------

  CREATE TABLE "MINIPRJ"."MENUS" 
   (	"MENU_ID" CHAR(6 BYTE), 
	"MENU_NAME" VARCHAR2(100 BYTE), 
	"MENU_SEQ" NUMBER(5,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Table ROOMS
--------------------------------------------------------

  CREATE TABLE "MINIPRJ"."ROOMS" 
   (	"R_ID" CHAR(7 BYTE), 
	"R_CAP" NUMBER(3,0), 
	"GRP_ID" CHAR(7 BYTE), 
	"R_GENDER" CHAR(1 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Table SEATS
--------------------------------------------------------

  CREATE TABLE "MINIPRJ"."SEATS" 
   (	"R_ID" CHAR(4 BYTE), 
	"COM_ID" CHAR(7 BYTE), 
	"S_STATUS" CHAR(1 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Table SEATS_HIS
--------------------------------------------------------

  CREATE TABLE "MINIPRJ"."SEATS_HIS" 
   (	"SH_IDX" NUMBER(10,0), 
	"S_ID" VARCHAR2(20 BYTE), 
	"U_ID" CHAR(4 BYTE), 
	"SH_END_TIME" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Table SEATS_RES
--------------------------------------------------------

  CREATE TABLE "MINIPRJ"."SEATS_RES" 
   (	"SR_IDX" NUMBER(10,0), 
	"U_ID" VARCHAR2(20 BYTE), 
	"S_ID" CHAR(4 BYTE), 
	"SR_USE_TIME" NUMBER(2,0), 
	"SR_START_TIME" VARCHAR2(50 BYTE), 
	"SR_END_TIME" VARCHAR2(50 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Table TICKETS
--------------------------------------------------------

  CREATE TABLE "MINIPRJ"."TICKETS" 
   (	"T_ID" CHAR(7 BYTE), 
	"T_HOUR" NUMBER(4,0), 
	"T_PRICE" NUMBER(10,0), 
	"T_GUBUN" CHAR(1 BYTE), 
	"GRP_ID" CHAR(7 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Table TICKETS_BUY
--------------------------------------------------------

  CREATE TABLE "MINIPRJ"."TICKETS_BUY" 
   (	"TB_IDX" NUMBER(7,0), 
	"U_ID" VARCHAR2(20 BYTE), 
	"T_ID" CHAR(7 BYTE), 
	"TB_TIME" VARCHAR2(50 BYTE), 
	"TB_PRICE" NUMBER(10,0), 
	"TB_DISCOUNT" NUMBER(10,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Table USERS
--------------------------------------------------------

  CREATE TABLE "MINIPRJ"."USERS" 
   (	"U_IDX" NUMBER(5,0), 
	"U_ID" VARCHAR2(20 BYTE), 
	"U_PW" VARCHAR2(20 BYTE), 
	"U_NAME" VARCHAR2(30 BYTE), 
	"U_AGE" NUMBER(3,0), 
	"U_GENDER" CHAR(1 BYTE), 
	"U_TEL" VARCHAR2(20 BYTE), 
	"U_QUESTION" CHAR(1 BYTE), 
	"U_ANSWER" VARCHAR2(40 BYTE), 
	"D_ID" CHAR(7 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Table USERS_GRD
--------------------------------------------------------

  CREATE TABLE "MINIPRJ"."USERS_GRD" 
   (	"D_ID" CHAR(7 BYTE), 
	"D_TOT_PAY" NUMBER(10,0), 
	"D_SALE_PCT" NUMBER(3,2), 
	"GRP_ID" CHAR(7 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
REM INSERTING into MINIPRJ.BOARDS
SET DEFINE OFF;
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (2,'MENU02','2','2','KTH','2020-08-18 21:07:26',0,2,0,0,2,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (3,'MENU02','3','3','KTH','2020-08-18 21:07:29',0,3,0,0,3,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (4,'MENU02','4','4','KTH','2020-08-18 21:07:34',0,4,0,0,4,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (5,'MENU02','5','5','KTH','2020-08-18 21:07:37',2,5,0,0,5,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (6,'MENU02','6','666','admin','2020-08-18 21:07:40',7,6,0,0,6,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (7,'MENU02','7','7','KTH','2020-08-18 21:07:53',1,7,0,0,7,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (8,'MENU02','8','8','KTH','2020-08-18 21:07:56',30,8,0,0,8,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (47,'MENU02','ㅁㄴㅇ','ㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹㅎㅇㄴㄹ에해ㅓㅡㅜㅐㄹㅇㅎ;ㅣㅇ리;흥ㄹ;ㅣㅎㅎㄹ','KTH','2020-08-20 10:05:07',4,12,0,0,12,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (44,'MENU01','ㅇ','ㅇ','admin','2020-08-20 09:28:41',0,13,0,0,13,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (11,'MENU02','11','11','KTH','2020-08-18 21:08:07',4,11,0,0,11,1);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (46,'MENU02','  ┖8','ㄳㄳㄳㄳ','admin','2020-08-20 09:29:12',4,8,1,1,8,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (13,'MENU01','1','1','admin','2020-08-18 21:08:35',0,1,0,0,1,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (14,'MENU01','2','2','admin','2020-08-18 21:08:37',1,2,0,0,2,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (15,'MENU01','3','3','admin','2020-08-18 21:08:42',0,3,0,0,3,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (16,'MENU01','4','4','admin','2020-08-18 21:08:44',1,4,0,0,4,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (17,'MENU01','5','5','admin','2020-08-18 21:08:47',0,5,0,0,5,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (18,'MENU01','6','6','admin','2020-08-18 21:08:50',1,6,0,0,6,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (45,'MENU01','ㄳ','ㄳ','admin','2020-08-20 09:28:46',7,14,0,0,14,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (48,'MENU01','ㄱㅈㅇ','ㄱㅈㅇ','admin','2020-08-20 15:37:49',0,15,0,0,15,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (49,'MENU01','파일첨부확인3','3','admin','2020-08-20 16:04:37',2,16,0,0,16,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (22,'MENU01','10','10','admin','2020-08-18 21:09:04',2,10,0,0,10,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (23,'MENU01','11','11','admin','2020-08-18 21:09:06',0,11,0,0,11,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (24,'MENU02','  ┖11','23','admin','2020-08-18 21:09:36',4,11,1,1,11,1);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (25,'MENU02','  ┖11','11-2','admin','2020-08-18 21:10:32',4,11,1,1,11,1);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (26,'MENU01','11','11','admin','2020-08-18 21:15:22',0,12,0,0,12,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (27,'MENU02','  ┖6','6-1','admin','2020-08-18 21:16:58',0,6,1,1,6,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (28,'MENU02','  ┖6','6-2','admin','2020-08-18 21:17:05',0,6,1,1,6,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (29,'MENU02','  ┖6','6-3','admin','2020-08-18 21:17:16',1,6,1,1,6,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (1,'MENU02','1','1','KTH','2020-08-18 21:07:23',4,1,0,0,1,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (50,'MENU01','ㅇ','ㅇ','admin','2020-08-20 16:05:28',0,17,0,0,17,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (51,'MENU01','공지사항테스트2','ㅇㅇㅇㅇ','admin','2020-08-20 16:05:38',1,18,0,0,18,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (53,'MENU01','파일첨부확인5','5','admin','2020-08-20 16:29:01',3,20,0,0,20,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (52,'MENU01','파일첨부확인4','4','admin','2020-08-20 16:08:35',1,19,0,0,19,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (54,'MENU01','파일첨부6','6','admin','2020-08-20 16:35:56',2,21,0,0,21,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (55,'MENU01','파일ㅊ머부7','7','admin','2020-08-20 16:37:46',4,22,0,0,22,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (56,'MENU01','파일첨부 9','9','admin','2020-08-20 17:04:25',1,23,0,0,23,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (57,'MENU01','파일첨부10','10','admin','2020-08-20 17:06:24',2,24,0,0,24,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (58,'MENU01','파일첨부11','11','admin','2020-08-20 17:12:25',1,25,0,0,25,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (59,'MENU01','파일첨부 12','ㅇㅇ','admin','2020-08-20 17:22:37',2,26,0,0,26,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (40,'MENU02','  ┖1','123123','admin','2020-08-19 17:03:30',0,1,1,1,1,1);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (41,'MENU02','  ┖1','123','admin','2020-08-19 17:06:25',0,1,1,1,1,1);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (42,'MENU02','  ┖1','123123','admin','2020-08-19 17:07:03',0,1,1,1,1,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (60,'MENU01','파일첨부3333333','333','admin','2020-08-20 17:32:14',1,27,0,0,27,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (61,'MENU01','ㅎㄹㅇㅀ','ㅎㅎㄹ','admin','2020-08-20 17:39:00',1,28,0,0,28,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (62,'MENU02','  ┖ㅁㄴㅇ','ㅁㄴㅇ','admin','2020-08-20 18:14:18',0,12,1,1,12,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (63,'MENU01','파일업로드1','1','admin','2020-08-20 18:21:22',2,29,0,0,29,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (64,'MENU01','파일업로드2','2','admin','2020-08-20 18:22:33',1,30,0,0,30,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (65,'MENU01','파일업로드3','3','admin','2020-08-20 18:29:33',1,31,0,0,31,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (66,'MENU01','파일업로드4','4','admin','2020-08-20 18:30:34',1,32,0,0,32,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (67,'MENU01','파일업로드5','5','admin','2020-08-20 18:34:43',2,33,0,0,33,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (68,'MENU01','파일업로드6','6','admin','2020-08-20 18:36:22',1,34,0,0,34,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (69,'MENU01','7','7','admin','2020-08-20 18:50:14',0,35,0,0,35,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (70,'MENU01','8','8','admin','2020-08-20 18:51:54',2,36,0,0,36,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (71,'MENU02','문의사항입니다 파일첨부 !!','11','KTH','2020-08-20 18:53:32',3,13,0,0,13,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (72,'MENU02','  ┖문의사항입니다 파일첨부 !!','ㅇㅇㅇ','admin','2020-08-20 18:53:47',0,13,1,1,13,0);
Insert into MINIPRJ.BOARDS (B_IDX,B_MENU_ID,B_TITLE,B_CONT,B_WRITER,B_REGDATE,B_READCOUNT,B_BNUM,B_LVL,B_STEP,B_NREF,B_DELNUM) values (73,'MENU01','231','132','admin','2020-08-20 19:49:00',1,37,0,0,37,0);
REM INSERTING into MINIPRJ.BOARDS_HISTORY
SET DEFINE OFF;
Insert into MINIPRJ.BOARDS_HISTORY (H_B_IDX,H_B_MENU_ID,H_B_TITLE,H_B_CONT,H_B_WRITER,H_B_REGDATE,H_B_READCOUNT,H_B_BNUM,H_B_LVL,H_B_STEP,H_B_NREF,H_B_DELNUM) values (38,'MENU01','공지사항15','15','admin','2020-08-19 09:15:17',5,18,0,0,18,0);
Insert into MINIPRJ.BOARDS_HISTORY (H_B_IDX,H_B_MENU_ID,H_B_TITLE,H_B_CONT,H_B_WRITER,H_B_REGDATE,H_B_READCOUNT,H_B_BNUM,H_B_LVL,H_B_STEP,H_B_NREF,H_B_DELNUM) values (31,'MENU02','1123123123','435345','KTH','2020-08-19 09:05:38',9,14,0,0,14,0);
Insert into MINIPRJ.BOARDS_HISTORY (H_B_IDX,H_B_MENU_ID,H_B_TITLE,H_B_CONT,H_B_WRITER,H_B_REGDATE,H_B_READCOUNT,H_B_BNUM,H_B_LVL,H_B_STEP,H_B_NREF,H_B_DELNUM) values (32,'MENU02','  ┖1123123123','123123','admin','2020-08-19 09:06:10',5,14,1,1,14,0);
Insert into MINIPRJ.BOARDS_HISTORY (H_B_IDX,H_B_MENU_ID,H_B_TITLE,H_B_CONT,H_B_WRITER,H_B_REGDATE,H_B_READCOUNT,H_B_BNUM,H_B_LVL,H_B_STEP,H_B_NREF,H_B_DELNUM) values (37,'MENU01','공지사항14','14','admin','2020-08-19 09:15:11',2,17,0,0,17,0);
REM INSERTING into MINIPRJ.COMMONS
SET DEFINE OFF;
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0000','�뒪�꽣�뵒�떎',0,'ROOT   ','GRP0001');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0001','�냼�삎',1,'COM0000','GRP0001');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0002','以묓삎',1,'COM0000','GRP0001');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0003','���삎',1,'COM0000','GRP0001');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0004','硫붽��떎',2,'COM0001','GRP0001');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0005','�뒪��踰낆뒪�떎',2,'COM0001','GRP0001');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0006','�닾�뜽�떎',2,'COM0001','GRP0001');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0007','踰좊꽕�떎',2,'COM0001','GRP0001');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0008','�옄�뒪誘쇱떎',2,'COM0002','GRP0001');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0009','肄붿뭅肄쒕씪�떎',2,'COM0002','GRP0001');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0010','�렔�떆�떎',2,'COM0002','GRP0001');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0011','�솚���떎',2,'COM0002','GRP0001');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0012','媛덈같�떎',2,'COM0002','GRP0001');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0013','留섑꽣�떎',2,'COM0003','GRP0001');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0014','留λ궇�떎',2,'COM0003','GRP0001');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0015','濡��뜲�떎',2,'COM0003','GRP0001');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0016','�굹臾댁떎',2,'COM0003','GRP0001');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0017','�댉�떎',2,'COM0003','GRP0001');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM1000','�뿴�엺�떎',0,'ROOT   ','GRP0002');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0001','�궓�꽦',1,'COM1000','GRP0002');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0002','�뿬�꽦',1,'COM1000','GRP0002');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0003','�샎�꽦',1,'COM1000','GRP0002');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0004','�깭�솕愿�',2,'COM0001','GRP0002');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0005','�옱�쁺愿�',2,'COM0001','GRP0002');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0006','�썝�꽍愿�',2,'COM0002','GRP0002');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0007','�슜�삤愿�',2,'COM0002','GRP0002');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0008','�슚�꽦愿�',2,'COM0003','GRP0002');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM2000','�쉶�썝�벑湲�',0,'ROOT   ','GRP0003');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0001','1�꽦湲�',1,'COM2000','GRP0003');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0002','2�꽦湲�',1,'COM2000','GRP0003');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0003','3�꽦湲�',1,'COM2000','GRP0003');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0004','4�꽦湲�',1,'COM2000','GRP0003');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0005','5�꽦湲�',1,'COM2000','GRP0003');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM3000','�씠�슜沅�',0,'ROOT   ','GRP0004');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0001','12�떆媛� �씠�슜沅�',1,'COM3000','GRP0004');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0002','24�떆媛� �씠�슜沅�',1,'COM3000','GRP0004');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0003','48�떆媛� �씠�슜沅�',1,'COM3000','GRP0004');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0004','100�떆媛� �씠�슜沅�',1,'COM3000','GRP0004');
Insert into MINIPRJ.COMMONS (COM_ID,COM_VAL,COM_LVL,PARENT_ID,GRP_ID) values ('COM0005','200�떆媛� �씠�슜沅�',1,'COM3000','GRP0004');
REM INSERTING into MINIPRJ.COMMONS_GRP
SET DEFINE OFF;
Insert into MINIPRJ.COMMONS_GRP (GRP_ID,GRP_VAL) values ('GRP0002','�뿴�엺�떎');
Insert into MINIPRJ.COMMONS_GRP (GRP_ID,GRP_VAL) values ('GRP0001','�뒪�꽣�뵒�떎');
Insert into MINIPRJ.COMMONS_GRP (GRP_ID,GRP_VAL) values ('GRP0003','�쉶�썝�벑湲�');
Insert into MINIPRJ.COMMONS_GRP (GRP_ID,GRP_VAL) values ('GRP0004','�씠�슜沅�');
REM INSERTING into MINIPRJ.FILES
SET DEFINE OFF;
Insert into MINIPRJ.FILES (FILE_NUM,IDX,FILENAME,FILEEXT,SFILENAME) values (1,63,'스프링설정','.txt','스프링설정.txt');
Insert into MINIPRJ.FILES (FILE_NUM,IDX,FILENAME,FILEEXT,SFILENAME) values (2,64,'spring 설정 정리','.txt','spring 설정 정리.txt');
Insert into MINIPRJ.FILES (FILE_NUM,IDX,FILENAME,FILEEXT,SFILENAME) values (3,66,'spring 설정 정리.txt','.txt','spring 설정 정리.txt');
Insert into MINIPRJ.FILES (FILE_NUM,IDX,FILENAME,FILEEXT,SFILENAME) values (4,67,'스프링설정.txt','.txt','스프링설정.txt');
Insert into MINIPRJ.FILES (FILE_NUM,IDX,FILENAME,FILEEXT,SFILENAME) values (5,68,'스프링설정.txt','.txt','스프링설정.txt');
Insert into MINIPRJ.FILES (FILE_NUM,IDX,FILENAME,FILEEXT,SFILENAME) values (6,69,'스프링설정.txt','.txt','스프링설정.txt');
Insert into MINIPRJ.FILES (FILE_NUM,IDX,FILENAME,FILEEXT,SFILENAME) values (7,70,'스프링설정.txt','.txt','스프링설정.txt');
Insert into MINIPRJ.FILES (FILE_NUM,IDX,FILENAME,FILEEXT,SFILENAME) values (8,71,'스프링설정.txt','.txt','스프링설정1.txt');
Insert into MINIPRJ.FILES (FILE_NUM,IDX,FILENAME,FILEEXT,SFILENAME) values (9,73,'스프링설정.txt','.txt','스프링설정12.txt');
REM INSERTING into MINIPRJ.MENUS
SET DEFINE OFF;
Insert into MINIPRJ.MENUS (MENU_ID,MENU_NAME,MENU_SEQ) values ('MENU01','공지사항',1);
Insert into MINIPRJ.MENUS (MENU_ID,MENU_NAME,MENU_SEQ) values ('MENU02','문의사항',2);
REM INSERTING into MINIPRJ.ROOMS
SET DEFINE OFF;
Insert into MINIPRJ.ROOMS (R_ID,R_CAP,GRP_ID,R_GENDER) values ('COM0004',30,'GRP0002','M');
Insert into MINIPRJ.ROOMS (R_ID,R_CAP,GRP_ID,R_GENDER) values ('COM0005',40,'GRP0002','M');
Insert into MINIPRJ.ROOMS (R_ID,R_CAP,GRP_ID,R_GENDER) values ('COM0006',30,'GRP0002','F');
Insert into MINIPRJ.ROOMS (R_ID,R_CAP,GRP_ID,R_GENDER) values ('COM0007',40,'GRP0002','F');
Insert into MINIPRJ.ROOMS (R_ID,R_CAP,GRP_ID,R_GENDER) values ('COM0008',60,'GRP0002','A');
REM INSERTING into MINIPRJ.SEATS
SET DEFINE OFF;
REM INSERTING into MINIPRJ.SEATS_HIS
SET DEFINE OFF;
Insert into MINIPRJ.SEATS_HIS (SH_IDX,S_ID,U_ID,SH_END_TIME) values (1,'S001','SHS ','2020-08-16 20:22:30');
REM INSERTING into MINIPRJ.SEATS_RES
SET DEFINE OFF;
Insert into MINIPRJ.SEATS_RES (SR_IDX,U_ID,S_ID,SR_USE_TIME,SR_START_TIME,SR_END_TIME) values (1,'SHS','S001',4,'2020-08-16 18:22:22','2020-08-16 20:22:30');
REM INSERTING into MINIPRJ.TICKETS
SET DEFINE OFF;
Insert into MINIPRJ.TICKETS (T_ID,T_HOUR,T_PRICE,T_GUBUN,GRP_ID) values ('COM0001',12,10000,'0','GRP0004');
Insert into MINIPRJ.TICKETS (T_ID,T_HOUR,T_PRICE,T_GUBUN,GRP_ID) values ('COM0002',24,19000,'0','GRP0004');
Insert into MINIPRJ.TICKETS (T_ID,T_HOUR,T_PRICE,T_GUBUN,GRP_ID) values ('COM0003',48,37000,'0','GRP0004');
Insert into MINIPRJ.TICKETS (T_ID,T_HOUR,T_PRICE,T_GUBUN,GRP_ID) values ('COM0004',100,75000,'0','GRP0004');
Insert into MINIPRJ.TICKETS (T_ID,T_HOUR,T_PRICE,T_GUBUN,GRP_ID) values ('COM0005',200,140000,'0','GRP0004');
REM INSERTING into MINIPRJ.TICKETS_BUY
SET DEFINE OFF;
Insert into MINIPRJ.TICKETS_BUY (TB_IDX,U_ID,T_ID,TB_TIME,TB_PRICE,TB_DISCOUNT) values (1,'SHS','COM0001','20200803',10000,0);
Insert into MINIPRJ.TICKETS_BUY (TB_IDX,U_ID,T_ID,TB_TIME,TB_PRICE,TB_DISCOUNT) values (2,'SHS','COM0003','20200803',37000,0);
Insert into MINIPRJ.TICKETS_BUY (TB_IDX,U_ID,T_ID,TB_TIME,TB_PRICE,TB_DISCOUNT) values (3,'SHS','COM0005','20200803',140000,0);
Insert into MINIPRJ.TICKETS_BUY (TB_IDX,U_ID,T_ID,TB_TIME,TB_PRICE,TB_DISCOUNT) values (4,'KTW','COM0002','20200803',19000,0);
Insert into MINIPRJ.TICKETS_BUY (TB_IDX,U_ID,T_ID,TB_TIME,TB_PRICE,TB_DISCOUNT) values (5,'KTW','COM0002','20200803',19000,0);
Insert into MINIPRJ.TICKETS_BUY (TB_IDX,U_ID,T_ID,TB_TIME,TB_PRICE,TB_DISCOUNT) values (6,'SHS','COM0002','20200803',19000,0);
Insert into MINIPRJ.TICKETS_BUY (TB_IDX,U_ID,T_ID,TB_TIME,TB_PRICE,TB_DISCOUNT) values (7,'SHS','COM0005','20200803',133000,0);
REM INSERTING into MINIPRJ.USERS
SET DEFINE OFF;
Insert into MINIPRJ.USERS (U_IDX,U_ID,U_PW,U_NAME,U_AGE,U_GENDER,U_TEL,U_QUESTION,U_ANSWER,D_ID) values (12,'SHS','1234','서효성',29,'M','010-0000-0003','C','1','COM0001');
Insert into MINIPRJ.USERS (U_IDX,U_ID,U_PW,U_NAME,U_AGE,U_GENDER,U_TEL,U_QUESTION,U_ANSWER,D_ID) values (3,'KTH','1234','권태화',29,'M','010-0000-0003','C','1','COM0001');
Insert into MINIPRJ.USERS (U_IDX,U_ID,U_PW,U_NAME,U_AGE,U_GENDER,U_TEL,U_QUESTION,U_ANSWER,D_ID) values (13,'admin','1234','관리자1',29,'M','010-0000-0003','C','1','COM0001');
REM INSERTING into MINIPRJ.USERS_GRD
SET DEFINE OFF;
Insert into MINIPRJ.USERS_GRD (D_ID,D_TOT_PAY,D_SALE_PCT,GRP_ID) values ('COM0001',100000,1,'GRP0003');
Insert into MINIPRJ.USERS_GRD (D_ID,D_TOT_PAY,D_SALE_PCT,GRP_ID) values ('COM0002',200000,0.95,'GRP0003');
Insert into MINIPRJ.USERS_GRD (D_ID,D_TOT_PAY,D_SALE_PCT,GRP_ID) values ('COM0003',400000,0.9,'GRP0003');
Insert into MINIPRJ.USERS_GRD (D_ID,D_TOT_PAY,D_SALE_PCT,GRP_ID) values ('COM0004',800000,0.75,'GRP0003');
Insert into MINIPRJ.USERS_GRD (D_ID,D_TOT_PAY,D_SALE_PCT,GRP_ID) values ('COM0005',1600000,0.5,'GRP0003');
--------------------------------------------------------
--  DDL for Index BOARDS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MINIPRJ"."BOARDS_PK" ON "MINIPRJ"."BOARDS" ("B_IDX") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index COMMONS_GRP_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MINIPRJ"."COMMONS_GRP_PK" ON "MINIPRJ"."COMMONS_GRP" ("GRP_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index MENUS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MINIPRJ"."MENUS_PK" ON "MINIPRJ"."MENUS" ("MENU_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index SEATS_HIS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MINIPRJ"."SEATS_HIS_PK" ON "MINIPRJ"."SEATS_HIS" ("SH_IDX") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index SEATS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MINIPRJ"."SEATS_PK" ON "MINIPRJ"."SEATS" ("R_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index SEATS_RES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MINIPRJ"."SEATS_RES_PK" ON "MINIPRJ"."SEATS_RES" ("SR_IDX") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index SYS_C007325
--------------------------------------------------------

  CREATE UNIQUE INDEX "MINIPRJ"."SYS_C007325" ON "MINIPRJ"."USERS" ("U_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index SYS_C007561
--------------------------------------------------------

  CREATE UNIQUE INDEX "MINIPRJ"."SYS_C007561" ON "MINIPRJ"."ROOMS" ("R_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index TICKETS_BUY_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MINIPRJ"."TICKETS_BUY_PK" ON "MINIPRJ"."TICKETS_BUY" ("TB_IDX") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index TICKETS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MINIPRJ"."TICKETS_PK" ON "MINIPRJ"."TICKETS" ("T_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Index USERS_GRD_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "MINIPRJ"."USERS_GRD_PK" ON "MINIPRJ"."USERS_GRD" ("D_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM" ;
--------------------------------------------------------
--  DDL for Package PKG_BOARD
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "MINIPRJ"."PKG_BOARD" AS 
   
   /*메뉴리스트*/
    PROCEDURE PROC_MENU_LIST(
    O_ERR_CODE OUT VARCHAR2,
    O_ERR_MSG OUT VARCHAR2,
    O_CUR OUT SYS_REFCURSOR
    );
    
    /*게시글리스트*/
    PROCEDURE PROC_BOARD_SELECT(
    IN_MENU_ID IN BOARDS.B_MENU_ID%TYPE,
    IN_NOWPAGE IN NUMBER,
    IN_PAGECOUNT IN NUMBER,
    OUT_RECORDCOUNT OUT NUMBER,
    O_ERR_CODE OUT VARCHAR2,
    O_ERR_MSG OUT VARCHAR2,
    O_CUR OUT SYS_REFCURSOR
    );
     
     /*공지사항 조회*/
    PROCEDURE PROC_NOTICE_SELECT(
    IN_MENU_ID IN BOARDS.B_MENU_ID%TYPE,
    O_ERR_CODE OUT VARCHAR2,
    O_ERR_MSG OUT VARCHAR2,
    
    O_CUR OUT SYS_REFCURSOR
    );
     
  
    /*공지사항 작성*/
    PROCEDURE PROC_NOTICE_INSERT(
    IN_MENU_ID IN BOARDS.B_MENU_ID%TYPE,
    IN_TITLE IN BOARDS.B_TITLE%TYPE,
    IN_CONT IN BOARDS.B_CONT%TYPE,
    IN_WRITER IN BOARDS.B_WRITER%TYPE,
    
    IN_BNUM IN BOARDS.B_BNUM%TYPE,
    IN_LVL IN BOARDS.B_LVL%TYPE,
    IN_STEP IN BOARDS.B_STEP%TYPE,
    IN_NREF IN BOARDS.B_NREF%TYPE,
 
    IN_FILENAMES IN FILE_ARRAY,
    IN_FILEEXTS IN FILE_ARRAY,
    IN_SFILENAMES IN FILE_ARRAY,
    
    O_ERR_CODE OUT VARCHAR2,
    O_ERR_MSG OUT VARCHAR2
    

    
    ); 
    
    /*공지사항 삭제*/
    PROCEDURE PROC_NOTICE_DELETE(
    IN_IDX IN BOARDS.B_IDX%TYPE,
    IN_MENU_ID IN BOARDS.B_MENU_ID%TYPE,
    O_ERR_CODE OUT VARCHAR2,
    O_ERR_MSG OUT VARCHAR2
    );
    
    /*공지사항 확인*/
    PROCEDURE PROC_NOTICE_VIEW(
    IN_IDX IN NUMBER,
    O_ERR_CODE OUT VARCHAR2,
    O_ERR_MSG OUT VARCHAR2,
    O_CUR OUT SYS_REFCURSOR
    );
    
    /*공지사항 업데이트*/
    PROCEDURE PROC_NOTICE_UPDATE(
    IN_IDX IN NUMBER,
    IN_TITLE IN VARCHAR2,
    IN_CONT IN VARCHAR2,
    IN_WRITER IN VARCHAR2,
    O_ERR_CODE OUT VARCHAR2,
    O_ERR_MSG OUT VARCHAR2
    );
    
    /*문의사항 답글*/
    PROCEDURE PROC_COMMENT_INSERT(
    IN_MENU_ID IN VARCHAR2,
    IN_TITLE IN VARCHAR2,
    IN_CONT IN VARCHAR2,
    IN_WRITER IN VARCHAR2,
    IN_BNUM IN NUMBER,
    IN_LVL IN NUMBER,
    IN_STEP IN NUMBER,
    IN_NREF IN NUMBER,
    
    O_ERR_CODE OUT VARCHAR2,
    O_ERR_MSG OUT VARCHAR2
    );
    
     --첨부파일 목록(FILES 테이블에 있는 내용을 반환한다)
    PROCEDURE PROC_BOARD_FILELIST
    (
    IN_IDX IN NUMBER,
    O_CUR OUT SYS_REFCURSOR
    );
    
    
    
END PKG_BOARD;

/
--------------------------------------------------------
--  DDL for Package PKG_ROOMS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "MINIPRJ"."PKG_ROOMS" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
  PROCEDURE PROC_ROOMS_SEL
    (
        O_CUR           OUT     SYS_REFCURSOR
    );


END PKG_ROOMS;

/
--------------------------------------------------------
--  DDL for Package PKG_SEATS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "MINIPRJ"."PKG_SEATS" AS 

  /* TODO enter package declarations (types, exceptions, methods etc) here */ 
  PROCEDURE PROC_SEATS_SEL
    (
        IN_R_ID         IN      VARCHAR2,
        O_CUR           OUT     SYS_REFCURSOR
    );

  PROCEDURE PROC_SEATS_CHANGE
    (
        IN_S_ID IN VARCHAR2
    );


END PKG_SEATS;

/
--------------------------------------------------------
--  DDL for Package PKG_TICKETS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "MINIPRJ"."PKG_TICKETS" AS 

 PROCEDURE PROC_TICKETS_SEL (

    O_CUR   OUT SYS_REFCURSOR
 
 );
 
 PROCEDURE PROC_TICKETS_DEL (
     IN_COM_ID IN VARCHAR2,
     IN_T_ID IN VARCHAR2 
 );
 
 PROCEDURE PROC_TICKETS_UPDATE (
    IN_COM_ID IN VARCHAR2,
    IN_COM_VAL IN VARCHAR2,
    IN_GRP_ID IN VARCHAR2,
    IN_T_ID IN VARCHAR2,
    IN_T_HOUR IN NUMBER,
    IN_T_PRICE IN NUMBER,
    O_ERR_CODE  OUT VARCHAR2,
    O_ERR_MSG   OUT VARCHAR2
 )
 ;


  PROCEDURE PROC_TICKETS_INS(
 
    IN_T_HOUR IN NUMBER,
    IN_T_PRICE IN NUMBER,
    IN_COM_VAL IN VARCHAR2,
    O_ERR_CODE  OUT VARCHAR2,
    O_ERR_MSG   OUT VARCHAR2

 );

  PROCEDURE PROC_TICKETS_SALE(
  
  O_CUR OUT SYS_REFCURSOR
 );

END PKG_TICKETS;

/
--------------------------------------------------------
--  DDL for Package PKG_USERS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE "MINIPRJ"."PKG_USERS" AS 
--로그인
  PROCEDURE PROC_USERS_LOGIN(
    IN_U_ID IN VARCHAR2,
    IN_U_PW IN VARCHAR2,
    O_CUR OUT SYS_REFCURSOR
  
  );

    PROCEDURE PROC_USERS_VIEW(
    IN_U_ID IN VARCHAR2,
    IN_U_PW IN VARCHAR2,
    O_CUR OUT SYS_REFCURSOR

  );

--유저

    --출력
    PROCEDURE PROC_USERS_SEL(

        O_CUR OUT SYS_REFCURSOR
       
    );

    --삭제
    PROCEDURE PROC_USERS_DEL(
    IN_U_ID IN VARCHAR2
  );

  --수정
  PROCEDURE PROC_USERS_UPDATE(
    IN_U_ID IN VARCHAR2,
    IN_U_PW IN VARCHAR2,
    IN_U_NAME IN VARCHAR2,
    IN_U_AGE IN NUMBER,
    IN_U_GENDER IN VARCHAR2,
    IN_U_TEL IN VARCHAR2,
    IN_U_QUESTION IN VARCHAR2,
    IN_U_ANSWER IN VARCHAR2,
    O_ERR_CODE  OUT VARCHAR2,
    O_ERR_MSG   OUT VARCHAR2
  );

END PKG_USERS;

/
--------------------------------------------------------
--  DDL for Package Body PKG_BOARD
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "MINIPRJ"."PKG_BOARD" AS
    /*메뉴리스트(완료)*/
    PROCEDURE PROC_MENU_LIST(
    O_ERR_CODE OUT VARCHAR2,
    O_ERR_MSG OUT VARCHAR2,
    O_CUR OUT SYS_REFCURSOR
    )
    AS
    BEGIN
    OPEN O_CUR FOR
    SELECT MENU_ID AS B_MENU_ID, MENU_NAME AS B_MENU_NAME
    
    /*SELECT MENU_ID, 
        CASE MENU_ID 
        WHEN 'MENU01' THEN '공지사항' 
        WHEN 'MENU02' THEN '문의사항' 
        ELSE '' 
        END AS B_MENU_NAME 
    FROM BOARDS
    GROUP BY B_MENU_ID
    ORDER BY B_MENU_ID ASC;
        */
    FROM MENUS;
   
    
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
    O_ERR_CODE := SQLCODE;
    O_ERR_MSG :=  SQLERRM || '데이터가 존재하지 않습니다'; 
    WHEN OTHERS THEN
    O_ERR_CODE := SQLCODE;
    O_ERR_MSG  := SQLERRM;   
     
    END 
    PROC_MENU_LIST;
    
    
    /*게시글 전체 출력 리스트 + 페이징 처리*/
    PROCEDURE PROC_BOARD_SELECT(
    
    IN_MENU_ID IN BOARDS.B_MENU_ID%TYPE,
    IN_NOWPAGE IN NUMBER, --현재페이지
    IN_PAGECOUNT IN NUMBER, --한 페이지에 보여줄 페이지 LINE 수 
    OUT_RECORDCOUNT OUT NUMBER, --전체 자료수 계산
    O_ERR_CODE OUT VARCHAR2,
    O_ERR_MSG OUT VARCHAR2,

    O_CUR OUT SYS_REFCURSOR
    ) AS
    
    P_PAGE_STARTNUM NUMBER(5,0); --시작 페이지 
    P_PAGE_ENDNUM NUMBER(5,0); --종료 페이지
    v_delnum_count number(5,0);
    BEGIN
    --전체 자료수 계산

        SELECT COUNT(B_IDX) INTO OUT_RECORDCOUNT -- 전체 자료 수
        FROM BOARDS
        WHERE B_MENU_ID = IN_MENU_ID;
       -- AND B_DELNUM = 0;

    P_PAGE_STARTNUM := (OUT_RECORDCOUNT) - IN_PAGECOUNT * (IN_NOWPAGE-1); --현재 페이지의 시작 번호
    P_PAGE_ENDNUM := (OUT_RECORDCOUNT) - IN_PAGECOUNT * (IN_NOWPAGE)+1; --현재 페이지의 끝번호
    
    IF P_PAGE_ENDNUM < 0 THEN
        P_PAGE_ENDNUM := 1;
        END IF;
     
    --select count(B_DELNUM) into v_delnum_count FROM BOARDS
    --WHERE B_MENU_ID = IN_MENU_ID;
     
    --방법4
    OPEN O_CUR FOR 
    SELECT B.SE_B_IDX, B.B_IDX, B.B_MENU_ID, B.B_TITLE, B.B_CONT, B.B_WRITER, B.B_REGDATE, B.B_READCOUNT,B.B_BNUM, B.B_LVL,B.B_STEP, B.B_NREF, B.B_DELNUM
    FROM
    (
    SELECT ROW_NUMBER() OVER (ORDER BY B_NREF ASC, B_REGDATE DESC) AS SE_B_IDX, B_IDX,B_MENU_ID, B_TITLE, B_CONT,B_WRITER, B_REGDATE, B_READCOUNT, B_BNUM, B_LVL, B_STEP,B_NREF, B_DELNUM
    FROM BOARDS
    WHERE B_MENU_ID = IN_MENU_ID
    --AND B_DELNUM = 0
    ) B
    WHERE B.SE_B_IDX BETWEEN P_PAGE_ENDNUM AND P_PAGE_STARTNUM
    ORDER BY B.SE_B_IDX DESC
    ;
--    
--     SELECT B.SE_B_IDX, B.B_IDX, B.B_MENU_ID, B.B_TITLE, B.B_CONT, B.B_WRITER, B.B_REGDATE, B.B_READCOUNT,B.B_BNUM, B.B_LVL,B.B_STEP, B.B_NREF, B.B_DELNUM
--   FROM
--   ( 
--   SELECT ROW_NUMBER() OVER(ORDER BY SE_B_IDX DESC) AS SE_B_IDX, B_IDX,B_MENU_ID, B_TITLE, B_CONT,B_WRITER, B_REGDATE, B_READCOUNT, B_BNUM, B_LVL, B_STEP,B_NREF, B_DELNUM FROM
--   (
--    SELECT 
--    ROW_NUMBER() OVER(ORDER BY B_BNUM DESC, B_LVL ASC) AS SE_B_IDX ,B_IDX,B_MENU_ID, B_TITLE, B_CONT,B_WRITER, B_REGDATE, B_READCOUNT, B_BNUM, B_LVL, B_STEP,B_NREF, B_DELNUM
--    FROM BOARDS
--    WHERE B_MENU_ID = IN_MENU_ID
--    ) A
--    ORDER BY SE_B_IDX DESC) B
--    WHERE B.SE_B_IDX BETWEEN P_PAGE_ENDNUM AND P_PAGE_STARTNUM
--    ORDER BY B.SE_B_IDX DESC;
    
--    SELECT  B1.B_BNUM AS SE_B_IDX, B1.B_IDX, B1.B_MENU_ID, B1.B_TITLE, B1.B_CONT, B1.B_WRITER, B1.B_REGDATE, B1.B_READCOUNT, B1.B_BNUM, B1.B_LVL, B1.B_STEP, B1.B_NREF, B1.B_DELNUM
--    FROM (
--        SELECT B_IDX, B_MENU_ID, B_TITLE, B_CONT, B_WRITER, B_REGDATE, B_READCOUNT, B_BNUM, B_LVL, B_STEP, B_NREF, B_DELNUM 
--        FROM BOARDS 
--        WHERE B_MENU_ID = IN_MENU_ID 
--        ) B1
--    WHERE  B1.B_BNUM BETWEEN P_PAGE_ENDNUM AND P_PAGE_STARTNUM
--    ORDER BY B_BNUM DESC , B_STEP ASC
--    ;

    
--    SELECT SE_B_IDX, B1.B_IDX, B1.B_MENU_ID, B1.B_TITLE, B1.B_CONT, B1.B_WRITER, B1.B_REGDATE, B1.B_READCOUNT, B1.B_BNUM, B1.B_LVL, B1.B_STEP, B1.B_NREF, B1.B_DELNUM
--    FROM (
--        SELECT ROW_NUMBER() OVER ( ORDER BY B_BNUM DESC, B_LVL ASC ) AS SE_B_IDX,
--        B_IDX, B_MENU_ID, B_TITLE, B_CONT, B_WRITER, B_REGDATE, B_READCOUNT, B_BNUM, B_LVL, B_STEP, B_NREF, B_DELNUM 
--        FROM BOARDS 
--        WHERE B_MENU_ID = IN_MENU_ID 
--        ) B1
--    WHERE SE_B_IDX BETWEEN P_PAGE_ENDNUM AND P_PAGE_STARTNUM
--    ORDER BY B1.B_BNUM DESC, B1.B_LVL ASC
--    ;
    
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
    O_ERR_CODE :=  SQLCODE;
    O_ERR_MSG :=  SQLERRM || '데이터가 존재하지 않습니다'; 
    WHEN OTHERS THEN
    O_ERR_CODE :=  SQLCODE;
    O_ERR_MSG :=  SQLERRM;    
    
    END PROC_BOARD_SELECT;
    
  
    /*공지사항 조회*/
    PROCEDURE PROC_NOTICE_SELECT(
    IN_MENU_ID IN BOARDS.B_MENU_ID%TYPE,
    O_ERR_CODE OUT VARCHAR2,
    O_ERR_MSG OUT VARCHAR2,
    O_CUR OUT SYS_REFCURSOR
   
    ) AS
    V_CNT NUMBER := 0;
    
    BEGIN
    
    OPEN O_CUR FOR
    SELECT MENU_ID AS B_MENU_ID, MENU_NAME AS B_MENU_NAME
    FROM MENUS
    WHERE MENU_ID = IN_MENU_ID;
    --SELECT B_IDX, B_MENU_ID, B_TITLE,  B_CONT, B_WRITER, B_REGDATE, B_READCOUNT, B_BNUM, B_LVL, B_STEP, B_NREF, B_DELNUM
    --FROM BOARDS
    --WHERE B_MENU_ID = IN_MENU_ID
    
   
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
    O_ERR_CODE :=  SQLCODE;
    O_ERR_MSG :=  SQLERRM; 
    WHEN OTHERS THEN
    O_ERR_CODE :=  SQLCODE;
    O_ERR_MSG :=  SQLERRM;   
    
    END 
    PROC_NOTICE_SELECT; 
    
    /*공지사항 작성*/
    PROCEDURE PROC_NOTICE_INSERT(
    IN_MENU_ID IN BOARDS.B_MENU_ID%TYPE,
    IN_TITLE IN BOARDS.B_TITLE%TYPE,
    IN_CONT IN BOARDS.B_CONT%TYPE,
    IN_WRITER IN BOARDS.B_WRITER%TYPE,
    
    IN_BNUM IN BOARDS.B_BNUM%TYPE,
    IN_LVL IN BOARDS.B_LVL%TYPE,
    IN_STEP IN BOARDS.B_STEP%TYPE,
    IN_NREF IN BOARDS.B_NREF%TYPE,
   
    IN_FILENAMES IN FILE_ARRAY,
    IN_FILEEXTS IN FILE_ARRAY,
    IN_SFILENAMES IN FILE_ARRAY,
    
    O_ERR_CODE OUT VARCHAR2,
    O_ERR_MSG OUT VARCHAR2
    
    ) AS
    V_CNT NUMBER := 0;
    EX_INVALID_MENUID EXCEPTION;
    
    V_REGDATE BOARDS.B_REGDATE%TYPE := TO_CHAR(sysdate,'YYYY-MM-DD HH24:MI:SS');
    
    V_BNUM NUMBER(5,0);
    V_LVL NUMBER(5,0);
    V_STEP NUMBER(5,0);
    V_NREF NUMBER(5,0);
    
    V_MAXIDX NUMBER(5,0);
    BEGIN
   --MENU테이블 추가..  
    SELECT COUNT(*)
    INTO V_CNT
    FROM MENUS --BOARDS
    WHERE MENU_ID = IN_MENU_ID  --B_MENU_ID
    ;
    
    IF V_CNT = 0 THEN
    RAISE EX_INVALID_MENUID;
    END IF;
    
    IF IN_BNUM = 0 THEN
    SELECT NVL(MAX(B_BNUM),0)+1 INTO V_BNUM FROM BOARDS WHERE B_MENU_ID = IN_MENU_ID;
    --B_BNUM 이 아니라 B_IDX
    V_LVL := 0;
    V_STEP := 0; 
    --SELECT NVL(MAX(B_STEP),0)+1 INTO V_STEP FROM BOARDS WHERE B_MENU_ID = IN_MENU_ID;
    SELECT NVL(MAX(B_NREF),0)+1 INTO V_NREF FROM BOARDS WHERE B_MENU_ID = IN_MENU_ID;
    
    ELSE --답글
     V_BNUM := IN_BNUM;
     V_LVL := IN_LVL +1;
     V_STEP := IN_STEP +1;
     V_NREF := IN_NREF;
     
     UPDATE BOARDS
     SET B_STEP = B_STEP+1
     WHERE B_MENU_ID = IN_MENU_ID
     AND B_NREF= IN_NREF
     AND B_STEP > IN_STEP
     ;
     END IF;
    
    INSERT INTO BOARDS
        ( B_IDX, B_MENU_ID , B_TITLE, B_CONT, B_WRITER, B_REGDATE, B_READCOUNT, 
        B_BNUM, B_LVL, B_STEP, B_NREF)
    VALUES 
         ( (SELECT TRIM(NVL(MAX(B_IDX),0)+1) FROM BOARDS ),TRIM(IN_MENU_ID), TRIM(IN_TITLE), TRIM(IN_CONT), TRIM(IN_WRITER),TRIM(V_REGDATE), 0, 
            TRIM(V_BNUM), TRIM(V_LVL), TRIM(V_STEP),TRIM(V_NREF)
        )
        ;
    SELECT MAX(B_IDX) INTO V_MAXIDX FROM BOARDS;
    
    --FILES 처리
       IF IN_FILENAMES(1) IS NOT NULL THEN 
        FOR I IN IN_FILENAMES.FIRST .. IN_FILENAMES.LAST
        LOOP
             INSERT INTO FILES
                (FILE_NUM, IDX, FILENAME, FILEEXT, SFILENAME ) 
            VALUES
            (
                (SELECT NVL(MAX(FILE_NUM), 0) + 1 FROM FILES), V_MAXIDX, IN_FILENAMES(I), IN_FILEEXTS(I), IN_SFILENAMES(I)
            );
        END LOOP;
        ELSE 
            NULL;
    
    END IF;
    

    EXCEPTION 
    WHEN EX_INVALID_MENUID THEN
    O_ERR_CODE := SQLCODE;
    O_ERR_MSG := SQLCODE || '유효하지 않는 값입니다.';
     WHEN NO_DATA_FOUND THEN
    O_ERR_CODE :=  SQLCODE;
    O_ERR_MSG :=  SQLERRM || '데이터가 존재하지 않습니다'; 
    WHEN OTHERS THEN
    O_ERR_CODE := SQLCODE;
    O_ERR_MSG :=SQLERRM || '오류가 발생했습니다' ;
    ROLLBACK; 
    
  
    END PROC_NOTICE_INSERT;

    /*공지사항 삭제*/
    PROCEDURE PROC_NOTICE_DELETE(
    IN_IDX IN BOARDS.B_IDX%TYPE,
    IN_MENU_ID IN BOARDS.B_MENU_ID%TYPE,    -- 지우자
    O_ERR_CODE OUT VARCHAR2,
    O_ERR_MSG OUT VARCHAR2
    ) AS
    
    V_CNT NUMBER:= 0;
    V_RE_CNT NUMBER := 0;
    EX_INVALID_IDX EXCEPTION; 
    
    BEGIN
        SELECT COUNT(*)
        INTO V_CNT
        FROM BOARDS
        WHERE B_IDX = IN_IDX;
        
        IF V_CNT = 0 THEN
        RAISE EX_INVALID_IDX;
        END IF;
        
        -- 입력된 글의 답글 개수 찾기
        SELECT COUNT(*)
         INTO  V_RE_CNT
         FROM  BOARDS
         WHERE B_LVL > 0
          AND  B_BNUM = 
          (
            SELECT B_BNUM
            FROM BOARDS
            WHERE B_IDX = IN_IDX
          )
        ;
        
        IF V_RE_CNT > 0 THEN
            
            -- 답글이 있는 경우
            UPDATE BOARDS 
             SET   B_DELNUM = 1 
             WHERE B_IDX = IN_IDX
            ;
            DELETE FROM FILES WHERE IDX= IN_IDX;
            
        ELSE 
        
            -- 답글이 없는 경우
            DELETE FROM BOARDS
             WHERE B_IDX = IN_IDX
            ;
            DELETE FROM FILES WHERE IDX= IN_IDX;
        
        END IF;
    
        COMMIT;
    
    EXCEPTION 
    WHEN EX_INVALID_IDX THEN
    O_ERR_CODE := SQLCODE ;
    O_ERR_MSG := SQLCODE || '존재하지 않는 번호입니다.';
    WHEN NO_DATA_FOUND THEN
    O_ERR_CODE :=  SQLCODE;
    O_ERR_MSG :=  SQLERRM || '데이터가 존재하지 않습니다'; 
    WHEN OTHERS THEN
    O_ERR_CODE := SQLCODE;
    O_ERR_MSG := SQLERRM || '오류가 발생했습니다' ;
    ROLLBACK;

    END PROC_NOTICE_DELETE
    ;
    
    /*공지사항 확인*/  
    PROCEDURE PROC_NOTICE_VIEW(
    IN_IDX IN NUMBER,
    O_ERR_CODE OUT VARCHAR2,
    O_ERR_MSG OUT VARCHAR2,
    O_CUR OUT SYS_REFCURSOR
    
    ) AS
    V_CNT NUMBER := 0;
    EX_INVALID_IDX EXCEPTION;
    
    BEGIN
        SELECT COUNT(*)
        INTO V_CNT
        FROM BOARDS
        WHERE B_IDX = IN_IDX;
        
        IF V_CNT = 0 THEN
        RAISE EX_INVALID_IDX;
        END IF;
        
     OPEN O_CUR FOR
     SELECT B_IDX, B_MENU_ID, B_TITLE, B_CONT, B_WRITER, B_REGDATE, B_READCOUNT, B_BNUM, B_LVL, B_STEP, B_NREF, B_DELNUM
     FROM BOARDS
     WHERE B_IDX = IN_IDX
     AND B_DELNUM =0
     ;
    /*조회수 증가*/
     UPDATE BOARDS
     SET B_READCOUNT = B_READCOUNT+1
     WHERE B_IDX= IN_IDX;
     COMMIT;
     
    EXCEPTION 
    WHEN EX_INVALID_IDX THEN
    O_ERR_CODE := SQLCODE;
    O_ERR_MSG := '유효하지 않는 값입니다.';
    WHEN NO_DATA_FOUND THEN
    O_ERR_CODE :=  SQLCODE;
    O_ERR_MSG :=  SQLERRM; 
    WHEN OTHERS THEN
    O_ERR_CODE := SQLCODE;
    O_ERR_MSG :=SQLERRM || '오류가 발생했습니다' ;
    ROLLBACK; 
     
     
     
     
    END PROC_NOTICE_VIEW;
    
    

    /*공지사항 업데이트*/
    PROCEDURE PROC_NOTICE_UPDATE(
    IN_IDX IN NUMBER,
    IN_TITLE IN VARCHAR2,
    IN_CONT IN VARCHAR2,
    IN_WRITER IN VARCHAR2,
    O_ERR_CODE OUT VARCHAR2,
    O_ERR_MSG OUT VARCHAR2
    ) AS
     
    V_CNT NUMBER := 0;
    EX_INVALID_NUM EXCEPTION;
  BEGIN
    SELECT COUNT(*)
    INTO V_CNT
    FROM BOARDS
    WHERE B_IDX = IN_IDX;
    
    IF V_CNT = 0 THEN
    RAISE EX_INVALID_NUM;
    END IF;
    
    UPDATE BOARDS 
    SET B_TITLE = IN_TITLE ,B_CONT=IN_CONT, B_WRITER = IN_WRITER
    WHERE B_IDX= IN_IDX
    ;
    COMMIT;
    
    EXCEPTION 
    WHEN EX_INVALID_NUM THEN
    O_ERR_CODE := SQLCODE;
    O_ERR_MSG := SQLCODE || '유효하지 않는 값입니다.';
     WHEN NO_DATA_FOUND THEN
    O_ERR_CODE :=  SQLCODE;
    O_ERR_MSG :=  SQLERRM || '데이터가 존재하지 않습니다'; 
    WHEN OTHERS THEN
    O_ERR_CODE := SQLCODE;
    O_ERR_MSG :=SQLERRM || '오류가 발생했습니다' ;
    ROLLBACK;
    
  END PROC_NOTICE_UPDATE;

    
    /*문의사항 답글*/
    PROCEDURE PROC_COMMENT_INSERT(

    IN_MENU_ID IN VARCHAR2,
    IN_TITLE IN VARCHAR2,
    IN_CONT IN VARCHAR2,
    IN_WRITER IN VARCHAR2,
    IN_BNUM IN NUMBER,
    IN_LVL IN NUMBER,
    IN_STEP IN NUMBER,
    IN_NREF IN NUMBER,
    O_ERR_CODE OUT VARCHAR2,
    O_ERR_MSG OUT VARCHAR2
    
    ) AS
    V_BNUM NUMBER(5,0);
    V_LVL NUMBER(5,0);
    V_STEP NUMBER(5,0);
    V_NREF NUMBER(5,0);
     
    V_REGDATE BOARDS.B_REGDATE%TYPE := TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS'); 
    
    V_CNT NUMBER := 0;
    EX_INVALID_NUM EXCEPTION;

  BEGIN
        SELECT COUNT(*)
        INTO V_CNT
        FROM BOARDS
        WHERE B_MENU_ID = IN_MENU_ID;
        
        IF V_CNT = 0 THEN
        RAISE EX_INVALID_NUM;
        END IF;
        
    IF IN_BNUM=0 THEN RETURN; 
    ELSE
        V_BNUM:= IN_BNUM;
        V_LVL := IN_LVL+1;
        V_STEP := IN_STEP+1;
        V_NREF := IN_NREF; 
    END IF;
    
    INSERT INTO BOARDS (B_IDX, B_MENU_ID, B_TITLE, 
                        B_CONT, B_WRITER, B_REGDATE, 
                        B_READCOUNT, B_BNUM,B_LVL, B_STEP, B_NREF, B_DELNUM)
    VALUES
    ( (SELECT NVL(MAX(B_IDX),0)+1 FROM BOARDS), IN_MENU_ID, LPAD(' ',2*V_STEP) || DECODE(V_LVL,0,'','┖') || IN_TITLE,
                         IN_CONT, TRIM(IN_WRITER),V_REGDATE,
                          0,V_BNUM,V_LVL,V_STEP,V_NREF,0);

    EXCEPTION 
    WHEN EX_INVALID_NUM THEN
    O_ERR_CODE := SQLCODE;
    O_ERR_MSG := SQLCODE || '유효하지 않는 값입니다.';
     WHEN NO_DATA_FOUND THEN
    O_ERR_CODE :=  SQLCODE;
    O_ERR_MSG :=  SQLERRM || '데이터가 존재하지 않습니다'; 
    WHEN OTHERS THEN
    O_ERR_CODE := SQLCODE;
    O_ERR_MSG :=SQLERRM || '오류가 발생했습니다' ;
    ROLLBACK; 

     END PROC_COMMENT_INSERT;
   
   PROCEDURE PROC_BOARD_FILELIST
    (
    IN_IDX IN NUMBER,
    O_CUR OUT SYS_REFCURSOR
    ) AS
  BEGIN
    OPEN O_CUR FOR 
        SELECT FILE_NUM, IDX,FILENAME, FILEEXT, SFILENAME
        FROM FILES
        WHERE IDX = IN_IDX
        ;
      
        
    END PROC_BOARD_FILELIST;
     

END PKG_BOARD;

/
--------------------------------------------------------
--  DDL for Package Body PKG_ROOMS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "MINIPRJ"."PKG_ROOMS" AS
--성별에 따라서 
  PROCEDURE PROC_ROOMS_SEL
    (
        O_CUR           OUT     SYS_REFCURSOR
    ) AS
  BEGIN
    OPEN O_CUR FOR
    SELECT T1.R_ID, MAX(T2.COM_VAL) AS R_NAME,
           MAX(T1.R_CAP) AS SUM_SEATS,
           MAX(T1.R_CAP) - COUNT(DECODE(T3.S_STATUS,'1',1)) AS USABLE_SEATS, 
           COUNT(DECODE(T3.S_STATUS, '1', 1)) AS UNUSABLE_SEATS
     FROM  ROOMS T1, COMMONS T2, SEATS T3
     WHERE T1.R_ID   = T2.COM_ID
      AND  T1.GRP_ID = T2.GRP_ID
      AND  T1.R_ID   = T3.R_ID
      --AND  T1.R_GENDER IN (T4.U_GENDER, 'A')
      --AND  T4.U_ID   = IN_U_ID
      GROUP BY T1.R_ID
      ORDER BY T1.R_ID ASC
    ;
  END PROC_ROOMS_SEL;

END PKG_ROOMS;

/
--------------------------------------------------------
--  DDL for Package Body PKG_SEATS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "MINIPRJ"."PKG_SEATS" AS

  PROCEDURE PROC_SEATS_SEL
    (
        IN_R_ID         IN      VARCHAR2,
        O_CUR           OUT     SYS_REFCURSOR
    ) AS
  BEGIN
    OPEN O_CUR FOR
    
    SELECT B.S_ID AS S_ID, B.R_ID AS R_ID, DECODE(A.END_TIME, NULL, '사용가능', '사용중') AS AVAILABILITY, DECODE(B.S_STATUS, '1', '고장', '양호') AS BIGO
     FROM
    (
        SELECT T1.S_ID, MAX(T1.SH_END_TIME) AS END_TIME
         FROM  SEATS_HIS T1
         WHERE TO_CHAR(SYSDATE, 'YYYY-MM-DD DAY AM HH24:MI:SS') < SH_END_TIME
         GROUP BY T1.S_ID
    ) A,
    (
        SELECT S_ID, R_ID, S_STATUS
         FROM  SEATS
    ) B
     WHERE A.S_ID(+) = B.S_ID
      AND  B.R_ID = IN_R_ID
     ORDER BY B.S_ID
    ;
  END PROC_SEATS_SEL;

  PROCEDURE PROC_SEATS_CHANGE
    (
        IN_S_ID IN VARCHAR2
    ) AS
    
    V_S_STATUS SEATS.S_STATUS%TYPE; --타입을 같게 설정한다
    
  BEGIN
    
    SELECT S_STATUS INTO V_S_STATUS
    FROM SEATS
    WHERE S_ID = IN_S_ID
    ;
    
    IF V_S_STATUS = 1 THEN
      UPDATE SEATS SET S_STATUS=0 WHERE S_ID = IN_S_ID
      ;
      
    ELSIF V_S_STATUS = 0 THEN
      UPDATE SEATS SET S_STATUS=1 WHERE S_ID = IN_S_ID
      ;
      
    END IF;
    
    COMMIT;
    
  END PROC_SEATS_CHANGE;

END PKG_SEATS;

/
--------------------------------------------------------
--  DDL for Package Body PKG_TICKETS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "MINIPRJ"."PKG_TICKETS" AS

  PROCEDURE PROC_TICKETS_SEL (

    O_CUR   OUT SYS_REFCURSOR
 
 ) AS
  BEGIN
   OPEN O_CUR FOR
    SELECT T1.COM_ID,T2.T_ID,T2.GRP_ID,T1.COM_VAL, T2.T_HOUR, T2.T_PRICE
    FROM COMMONS T1, TICKETS T2
    WHERE T1.COM_ID = T2.T_ID 
    AND   T1.GRP_ID = T2.GRP_ID
    ORDER BY T1.COM_ID
    ;
    
    COMMIT;
   
  END PROC_TICKETS_SEL;

  PROCEDURE PROC_TICKETS_DEL (
     IN_COM_ID IN VARCHAR2,
     IN_T_ID IN VARCHAR2 
 ) AS
  BEGIN
  
  DELETE FROM (SELECT  T1.COM_ID, T2.T_ID, T1.COM_VAL, T2.T_HOUR, T2.T_PRICE
    FROM COMMONS T1, TICKETS T2
    WHERE T1.COM_ID = T2.T_ID 
    AND   T1.GRP_ID = T2.GRP_ID) T

    WHERE T.COM_ID = IN_COM_ID;

    DELETE FROM TICKETS   
    WHERE T_ID = IN_T_ID;
    
  END PROC_TICKETS_DEL;
  
  PROCEDURE PROC_TICKETS_UPDATE (
    IN_COM_ID IN VARCHAR2,
    IN_COM_VAL IN VARCHAR2,
    IN_GRP_ID IN VARCHAR2,
    IN_T_ID IN VARCHAR2,
    IN_T_HOUR IN NUMBER,
    IN_T_PRICE IN NUMBER,
    O_ERR_CODE  OUT VARCHAR2,
    O_ERR_MSG   OUT VARCHAR2
 )
  AS
  BEGIN
    UPDATE COMMONS
    SET
        COM_VAL = IN_COM_VAL
    WHERE
        COM_ID = IN_COM_ID
    AND GRP_ID = IN_GRP_ID;
    
    UPDATE TICKETS
    SET
    T_HOUR = IN_T_HOUR,
    T_PRICE = IN_T_PRICE
    WHERE
    T_ID = IN_T_ID;
    
    COMMIT;
    
        EXCEPTION
        WHEN OTHERS THEN
       O_ERR_CODE :=  SQLCODE;
       O_ERR_MSG :=  SQLERRM;
       
     ROLLBACK;
  END PROC_TICKETS_UPDATE;

  
  PROCEDURE PROC_TICKETS_INS(
 
    IN_T_HOUR IN NUMBER,
    IN_T_PRICE IN NUMBER,
    IN_COM_VAL IN VARCHAR2,
    O_ERR_CODE  OUT VARCHAR2,
    O_ERR_MSG   OUT VARCHAR2

 ) AS 
  BEGIN
  
INSERT INTO TICKETS (T_ID, T_HOUR, T_PRICE, T_GUBUN, GRP_ID)
VALUES(
(SELECT 'COM' || TRIM(TO_CHAR(TO_NUMBER(SUBSTR(MAX(T_ID), 4)) + 1, '0000'))
 FROM  TICKETS
 WHERE GRP_ID = 'GRP0004'
), IN_T_HOUR, IN_T_PRICE, '0', 'GRP0004')
;

INSERT INTO COMMONS (COM_ID, COM_VAL, COM_LVL, PARENT_ID, GRP_ID)
VALUES ((SELECT 'COM' || TRIM(TO_CHAR(TO_NUMBER(SUBSTR(MAX(COM_ID), 4)) + 1, '0000'))
 FROM  COMMONS
 WHERE GRP_ID = 'GRP0004'
  AND  COM_LVL = 1), IN_T_HOUR || '시간 이용권' , 1, 'COM3000', 'GRP0004');
    
    COMMIT;
    
    EXCEPTION
     WHEN OTHERS THEN
       O_ERR_CODE :=  SQLCODE;
       O_ERR_MSG :=  SQLERRM;
       
     ROLLBACK;
     
    END PROC_TICKETS_INS;

  PROCEDURE PROC_TICKETS_SALE(
  
  O_CUR OUT SYS_REFCURSOR
 ) AS
  BEGIN
        OPEN O_CUR FOR
        
    SELECT     
        U.U_ID, U.U_NAME, TB.T_ID, C.COM_VAL, TB.TB_TIME,T.T_PRICE
        FROM USERS U, TICKETS_BUY TB, COMMONS C, TICKETS T
       
        WHERE TB.U_ID = U.U_ID
        
        AND   C.COM_ID= TB.T_ID
        AND   T.T_ID = TB.T_ID
        
        AND   C.GRP_ID = 'GRP0004'
        ;
  END PROC_TICKETS_SALE;

    END PKG_TICKETS;

/
--------------------------------------------------------
--  DDL for Package Body PKG_USERS
--------------------------------------------------------

  CREATE OR REPLACE PACKAGE BODY "MINIPRJ"."PKG_USERS" AS

--로그인 프로시져 시작

  --로그인
  PROCEDURE PROC_USERS_LOGIN(
    IN_U_ID IN VARCHAR2,
    IN_U_PW IN VARCHAR2,
    O_CUR OUT SYS_REFCURSOR
  
  ) AS
  BEGIN
    OPEN O_CUR FOR 
    SELECT U_IDX,U_ID, U_PW, U_NAME, U_AGE, U_GENDER, U_TEL, U_QUESTION, U_ANSWER, D_ID
    FROM USERS
    WHERE U_ID = IN_U_ID
    AND U_PW = IN_U_PW
    ;

    EXCEPTION
        WHEN no_data_found THEN NULL;

  END PROC_USERS_LOGIN;

    --뷰
   PROCEDURE PROC_USERS_VIEW(
    IN_U_ID IN VARCHAR2,
    IN_U_PW IN VARCHAR2,
    O_CUR OUT SYS_REFCURSOR

  )AS

  BEGIN
    OPEN O_CUR FOR

  SELECT U_ID, U_PW, U_NAME
  FROM USERS
  WHERE U_ID = IN_U_ID
  AND U_PW = IN_U_PW;

  END PROC_USERS_VIEW;

-- 로그인 프로시져 끝


-- 유저 프로시져 시작

    --출력
    PROCEDURE PROC_USERS_SEL(

        O_CUR OUT SYS_REFCURSOR
    )
    AS

    BEGIN
        OPEN O_CUR FOR
        SELECT U_IDX, U_ID, U_PW, U_NAME, U_AGE, U_GENDER, U_TEL, U_QUESTION, U_ANSWER, D_ID
        FROM USERS
        ;
    END PROC_USERS_SEL;

    --삭제
    PROCEDURE PROC_USERS_DEL(
        IN_U_ID IN VARCHAR2
    )
    AS

    BEGIN
    DELETE USERS
    WHERE U_ID = IN_U_ID;

    END PROC_USERS_DEL;

   --수정

  PROCEDURE PROC_USERS_UPDATE(
    IN_U_ID IN VARCHAR2,

    IN_U_PW IN VARCHAR2,
    IN_U_NAME IN VARCHAR2,
    IN_U_AGE IN NUMBER,
    IN_U_GENDER IN VARCHAR2,
    IN_U_TEL IN VARCHAR2,
    IN_U_QUESTION IN VARCHAR2,
    IN_U_ANSWER IN VARCHAR2,
    O_ERR_CODE  OUT VARCHAR2,
    O_ERR_MSG   OUT VARCHAR2
  ) AS
  BEGIN

    UPDATE USERS
    SET

     U_PW = IN_U_PW,
     U_NAME = IN_U_NAME,
     U_AGE  = IN_U_AGE,
     U_GENDER = IN_U_GENDER,
     U_TEL  = IN_U_TEL,
     U_QUESTION = IN_U_QUESTION,
     U_ANSWER = IN_U_ANSWER

     WHERE U_ID = IN_U_ID;
     
     COMMIT;
     
      EXCEPTION
     WHEN OTHERS THEN
       O_ERR_CODE :=  SQLCODE;
       O_ERR_MSG :=  SQLERRM;
       
     ROLLBACK;


  END PROC_USERS_UPDATE;
  --유저 끝

END PKG_USERS;

/
--------------------------------------------------------
--  Constraints for Table BOARDS
--------------------------------------------------------

  ALTER TABLE "MINIPRJ"."BOARDS" ADD CONSTRAINT "BOARDS_PK" PRIMARY KEY ("B_IDX")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "MINIPRJ"."BOARDS" MODIFY ("B_REGDATE" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."BOARDS" MODIFY ("B_WRITER" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."BOARDS" MODIFY ("B_CONT" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."BOARDS" MODIFY ("B_TITLE" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."BOARDS" MODIFY ("B_MENU_ID" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."BOARDS" MODIFY ("B_IDX" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BOARDS_HISTORY
--------------------------------------------------------

  ALTER TABLE "MINIPRJ"."BOARDS_HISTORY" MODIFY ("H_B_REGDATE" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."BOARDS_HISTORY" MODIFY ("H_B_WRITER" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."BOARDS_HISTORY" MODIFY ("H_B_CONT" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."BOARDS_HISTORY" MODIFY ("H_B_TITLE" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."BOARDS_HISTORY" MODIFY ("H_B_MENU_ID" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."BOARDS_HISTORY" MODIFY ("H_B_IDX" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table COMMONS
--------------------------------------------------------

  ALTER TABLE "MINIPRJ"."COMMONS" MODIFY ("GRP_ID" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."COMMONS" MODIFY ("PARENT_ID" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."COMMONS" MODIFY ("COM_LVL" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."COMMONS" MODIFY ("COM_VAL" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."COMMONS" MODIFY ("COM_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table COMMONS_GRP
--------------------------------------------------------

  ALTER TABLE "MINIPRJ"."COMMONS_GRP" ADD CONSTRAINT "COMMONS_GRP_PK" PRIMARY KEY ("GRP_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "MINIPRJ"."COMMONS_GRP" MODIFY ("GRP_VAL" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."COMMONS_GRP" MODIFY ("GRP_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table FILES
--------------------------------------------------------

  ALTER TABLE "MINIPRJ"."FILES" MODIFY ("SFILENAME" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."FILES" MODIFY ("FILEEXT" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."FILES" MODIFY ("FILENAME" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."FILES" MODIFY ("IDX" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table MENUS
--------------------------------------------------------

  ALTER TABLE "MINIPRJ"."MENUS" ADD CONSTRAINT "MENUS_PK" PRIMARY KEY ("MENU_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "MINIPRJ"."MENUS" MODIFY ("MENU_SEQ" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."MENUS" MODIFY ("MENU_NAME" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."MENUS" MODIFY ("MENU_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ROOMS
--------------------------------------------------------

  ALTER TABLE "MINIPRJ"."ROOMS" MODIFY ("R_ID" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."ROOMS" MODIFY ("R_CAP" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."ROOMS" MODIFY ("GRP_ID" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."ROOMS" MODIFY ("R_GENDER" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."ROOMS" ADD PRIMARY KEY ("R_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
--------------------------------------------------------
--  Constraints for Table SEATS
--------------------------------------------------------

  ALTER TABLE "MINIPRJ"."SEATS" ADD CONSTRAINT "SEATS_PK" PRIMARY KEY ("R_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "MINIPRJ"."SEATS" MODIFY ("S_STATUS" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."SEATS" MODIFY ("COM_ID" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."SEATS" MODIFY ("R_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SEATS_HIS
--------------------------------------------------------

  ALTER TABLE "MINIPRJ"."SEATS_HIS" ADD CONSTRAINT "SEATS_HIS_PK" PRIMARY KEY ("SH_IDX")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "MINIPRJ"."SEATS_HIS" MODIFY ("SH_END_TIME" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."SEATS_HIS" MODIFY ("U_ID" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."SEATS_HIS" MODIFY ("S_ID" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."SEATS_HIS" MODIFY ("SH_IDX" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table SEATS_RES
--------------------------------------------------------

  ALTER TABLE "MINIPRJ"."SEATS_RES" MODIFY ("SR_END_TIME" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."SEATS_RES" MODIFY ("SR_USE_TIME" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."SEATS_RES" MODIFY ("S_ID" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."SEATS_RES" MODIFY ("U_ID" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."SEATS_RES" MODIFY ("SR_START_TIME" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."SEATS_RES" ADD CONSTRAINT "SEATS_RES_PK" PRIMARY KEY ("SR_IDX")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "MINIPRJ"."SEATS_RES" MODIFY ("SR_IDX" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TICKETS
--------------------------------------------------------

  ALTER TABLE "MINIPRJ"."TICKETS" MODIFY ("GRP_ID" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."TICKETS" ADD CONSTRAINT "TICKETS_PK" PRIMARY KEY ("T_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "MINIPRJ"."TICKETS" MODIFY ("T_GUBUN" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."TICKETS" MODIFY ("T_PRICE" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."TICKETS" MODIFY ("T_HOUR" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."TICKETS" MODIFY ("T_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table TICKETS_BUY
--------------------------------------------------------

  ALTER TABLE "MINIPRJ"."TICKETS_BUY" MODIFY ("TB_PRICE" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."TICKETS_BUY" MODIFY ("TB_TIME" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."TICKETS_BUY" MODIFY ("T_ID" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."TICKETS_BUY" MODIFY ("U_ID" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."TICKETS_BUY" MODIFY ("TB_IDX" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."TICKETS_BUY" ADD CONSTRAINT "TICKETS_BUY_PK" PRIMARY KEY ("TB_IDX")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
--------------------------------------------------------
--  Constraints for Table USERS
--------------------------------------------------------

  ALTER TABLE "MINIPRJ"."USERS" ADD PRIMARY KEY ("U_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "MINIPRJ"."USERS" MODIFY ("U_ANSWER" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."USERS" MODIFY ("U_QUESTION" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."USERS" MODIFY ("U_TEL" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."USERS" MODIFY ("U_GENDER" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."USERS" MODIFY ("U_AGE" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."USERS" MODIFY ("U_NAME" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."USERS" MODIFY ("U_PW" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."USERS" MODIFY ("U_ID" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."USERS" MODIFY ("U_IDX" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table USERS_GRD
--------------------------------------------------------

  ALTER TABLE "MINIPRJ"."USERS_GRD" ADD CONSTRAINT "USERS_GRD_PK" PRIMARY KEY ("D_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1 BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "SYSTEM"  ENABLE;
  ALTER TABLE "MINIPRJ"."USERS_GRD" MODIFY ("GRP_ID" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."USERS_GRD" MODIFY ("D_SALE_PCT" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."USERS_GRD" MODIFY ("D_TOT_PAY" NOT NULL ENABLE);
  ALTER TABLE "MINIPRJ"."USERS_GRD" MODIFY ("D_ID" NOT NULL ENABLE);
